import 'dart:async';
import 'package:flutter/material.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import '../../constants.dart';
import '../../services/location_service.dart';
import '../../services/maps_service.dart';
import '../../services/order_service.dart';

class DeliveryScreen extends StatefulWidget {
  const DeliveryScreen({super.key});

  @override
  _DeliveryScreenState createState() => _DeliveryScreenState();
}

class _DeliveryScreenState extends State<DeliveryScreen> {
  int _currentOrderIndex = 0;
  List<Map<String, dynamic>> _sortedOrders = [];
  Set<Marker> _markers = {};
  Completer<GoogleMapController> _controller = Completer();
  bool _isLoading = true;
  Polyline? _polyline;
  LatLng? _currentLocation;
  LatLng? _customerLocation;

  @override
  void initState() {
    super.initState();
    _loadSavedOrders();
  }

  Future<void> _getCurrentLocation() async {
    LatLng? currentLatLng = await LocationService.getCurrentLocation(context);
    if (currentLatLng != null) {
      setState(() {
        _currentLocation = currentLatLng;
        _markers.add(
          Marker(
            markerId: MarkerId('current_location'),
            position: currentLatLng,
            icon: BitmapDescriptor.defaultMarkerWithHue(
                BitmapDescriptor.hueViolet),
            infoWindow: InfoWindow(title: 'Your Location'),
          ),
        );
      });

      // Fetch directions after current location is set
      if (_customerLocation != null) {
        _fetchDirections(_currentLocation!, _customerLocation!);
      }
    }
  }

  Future<void> _loadSavedOrders() async {
    List<Map<String, dynamic>> loadedOrders =
        await OrderService.loadSavedOrders();
    setState(() {
      _sortedOrders = loadedOrders;
      _markers = MapService.generateMarkers(_sortedOrders);
      _isLoading = false;
    });

    if (_sortedOrders.isEmpty) {
      ScaffoldMessenger.of(context)
          .showSnackBar(SnackBar(content: Text('No saved orders found.')));
    } else {
      // Set customer location after orders are loaded
      final currentOrder = _sortedOrders[_currentOrderIndex];
      _customerLocation = LatLng(
        double.parse(currentOrder['customer']['lat']),
        double.parse(currentOrder['customer']['long']),
      );

      // Fetch directions if current location is already available
      if (_currentLocation != null) {
        _fetchDirections(_currentLocation!, _customerLocation!);
      }
    }
  }

  Future<void> _clearSelectedDelivery(int orderId) async {
    await OrderService.clearSelectedDelivery(orderId, _sortedOrders);
    setState(() {});
  }

  Future<void> _fetchDirections(LatLng origin, LatLng destination) async {
    final String apiKey = 'AIzaSyAy1hLcI4XMz-UV-JgZJswU5nXcQHcL6mk';
    final String url =
        'https://maps.googleapis.com/maps/api/directions/json?origin=${origin.latitude},${origin.longitude}&destination=${destination.latitude},${destination.longitude}&key=$apiKey';

    final response = await http.get(Uri.parse(url));
    if (response.statusCode == 200) {
      final data = json.decode(response.body);
      if (data['routes'].isNotEmpty) {
        final points = data['routes'][0]['overview_polyline']['points'];
        setState(() {
          _polyline = Polyline(
            polylineId: PolylineId('route'),
            points: _convertToLatLngList(_decodePoly(points)),
            color: Colors.blue,
            width: 5,
          );
        });
      } else {
        throw Exception('No routes found');
      }
    } else {
      throw Exception('Failed to load directions');
    }
  }

  List<LatLng> _decodePoly(String poly) {
    var list = poly.codeUnits;
    var lList = [];
    int index = 0;
    int len = poly.length;
    int c = 0;
    do {
      var shift = 0;
      int result = 0;
      do {
        c = list[index] - 63;
        result |= (c & 0x1F) << shift;
        shift += 5;
        index++;
      } while (c >= 32);
      if (result & 1 == 1) {
        result = ~result;
      }
      result = (result >> 1);
      lList.add(result);
    } while (index < len);

    List<LatLng> latLngList = [];
    for (var i = 0; i < lList.length - 1; i += 2) {
      latLngList.add(LatLng(lList[i] / 1E5, lList[i + 1] / 1E5));
    }
    return latLngList;
  }

  List<LatLng> _convertToLatLngList(List<LatLng> points) {
    return points;
  }

  @override
  Widget build(BuildContext context) {
    if (_isLoading) {
      return Scaffold(
        body: Center(child: CircularProgressIndicator()),
      );
    }

    if (_sortedOrders.isEmpty) {
      return Scaffold(
        appBar: AppBar(
          title: Text('Delivery Fulfillment',
              style: TextStyle(color: Colors.white)),
          automaticallyImplyLeading: false,
          backgroundColor: kPrimaryColor,
        ),
        body: Center(
          child: Text('No orders available.', style: TextStyle(fontSize: 16)),
        ),
      );
    }

    final currentOrder = _sortedOrders[_currentOrderIndex];
    String orderId = currentOrder['id'].toString();
    String address = currentOrder['customer']['address'] ?? 'No Address Available';
    double totalPrice = currentOrder['total_price']?.toDouble() ?? 0.0;

    return Scaffold(
      appBar: AppBar(
        title: Text('Delivery Fulfillment',
            style: TextStyle(color: Colors.white)),
        backgroundColor: kPrimaryColor,
        automaticallyImplyLeading: false,
      ),
      body: Scaffold(
        body: Stack(
          children: [
            // Google Map (Full Screen)
            if (!_isLoading)
              GoogleMap(
                onMapCreated: (GoogleMapController controller) {
                  _controller.complete(controller);
                },
                initialCameraPosition: CameraPosition(
                  target: _customerLocation ?? LatLng(14.7168122, 120.9553401),
                  zoom: 15,
                ),
                markers: _markers,
                polylines: _polyline != null ? {_polyline!} : {},
                padding: EdgeInsets.only(bottom: 200),
              ),
            if (!_isLoading && _sortedOrders.isEmpty)
              Center(
                child: Text('No orders available.',
                    style: TextStyle(fontSize: 16)),
              ),
            if (_isLoading) Center(child: CircularProgressIndicator()),

            // Order ID Container (Fixed Position on Map)
            Positioned(
              top: 10,
              left: 0,
              right: 0,
              child: Center(
                child: Container(
                  padding: EdgeInsets.all(8),
                  decoration: BoxDecoration(
                    color: Colors.white,
                    borderRadius: BorderRadius.circular(8),
                    boxShadow: [
                      BoxShadow(color: Colors.black26, blurRadius: 4)
                    ],
                  ),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.center,
                    children: [
                      Text('Order ID:',
                          style: TextStyle(
                              fontSize: 16, fontWeight: FontWeight.bold)),
                      Text(orderId,
                          style: TextStyle(fontSize: 16, color: Colors.black),
                          textAlign: TextAlign.center),
                    ],
                  ),
                ),
              ),
            ),

            // Draggable Order Details Sheet
            DraggableScrollableSheet(
              initialChildSize: 0.2,
              minChildSize: 0.2,
              maxChildSize: 0.5,
              builder: (context, scrollController) {
                return Container(
                  decoration: BoxDecoration(
                    color: Colors.white,
                    borderRadius:
                        BorderRadius.vertical(top: Radius.circular(20)),
                    boxShadow: [
                      BoxShadow(color: Colors.black26, blurRadius: 8)
                    ],
                  ),
                  child: SingleChildScrollView(
                    controller: scrollController,
                    child: Padding(
                      padding: const EdgeInsets.all(12.0),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Center(
                            child: Container(
                              width: 50,
                              height: 5,
                              margin: EdgeInsets.only(bottom: 8),
                              decoration: BoxDecoration(
                                color: Colors.grey[400],
                                borderRadius: BorderRadius.circular(10),
                              ),
                            ),
                          ),
                          // Customer Details
                          Text('Customer Details:',
                              style: TextStyle(
                                  fontSize: 14, fontWeight: FontWeight.bold)),
                          Row(
                            children: [
                              Text(
                                '${currentOrder['customer']['first_name']} ${currentOrder['customer']['last_name']}',
                                style: TextStyle(fontSize: 16),
                              ),
                              Spacer(),
                              Row(
                                mainAxisSize: MainAxisSize.min,
                                children: [
                                  Icon(Icons.phone,
                                      size: 22, color: kPrimaryColor),
                                  SizedBox(width: 8),
                                  Icon(Icons.message_rounded,
                                      size: 22, color: kPrimaryColor),
                                ],
                              ),
                            ],
                          ),
                          Text(address, style: TextStyle(fontSize: 16)),
                          Divider(),

                          // Delivery Instructions
                          Text('Delivery Instruction:',
                              style: TextStyle(
                                  fontSize: 14, fontWeight: FontWeight.bold)),
                          Text(
                              currentOrder['remarks']?.isNotEmpty ?? false
                                  ? currentOrder['remarks']
                                  : "None",
                              style: TextStyle(fontSize: 16)),
                          Divider(),

                          // Order Summary
                          Text('Order Summary',
                              style: TextStyle(
                                  fontSize: 14, fontWeight: FontWeight.bold)),
                          Column(
                            children: (currentOrder['order_details'] as List)
                                .map<Widget>((orderDetail) => Padding(
                                      padding: const EdgeInsets.symmetric(
                                          vertical: 4.0),
                                      child: Row(
                                        mainAxisAlignment:
                                            MainAxisAlignment.spaceBetween,
                                        children: [
                                          Text(
                                              '${orderDetail['quantity']} x ${orderDetail['product']['name']}'),
                                          Text(
                                              'PHP ${orderDetail['total_price']}'),
                                        ],
                                      ),
                                    ))
                                .toList(),
                          ),
                          Row(
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: [
                              Text('Total Price:',
                                  style: TextStyle(
                                      fontWeight: FontWeight.bold)),
                              Text('PHP ${totalPrice.toStringAsFixed(2)}'),
                            ],
                          ),
                          SizedBox(height: 12),

                          // Action Buttons
                          Row(
                            mainAxisAlignment: MainAxisAlignment.spaceAround,
                            children: [
                              Flexible(
                                child: ElevatedButton(
                                  onPressed: () => _clearSelectedDelivery(
                                      int.parse(orderId)),
                                  child: Text('Complete Delivery'),
                                ),
                              ),
                              SizedBox(width: 8),
                              Flexible(
                                child: ElevatedButton(
                                  style: ButtonStyle(
                                    backgroundColor:
                                        MaterialStateProperty.all(Colors.red),
                                  ),
                                  onPressed: () {},
                                  child: Text('Failed Delivery'),
                                ),
                              ),
                            ],
                          ),
                          FutureBuilder(
                            future: _getCurrentLocation(),
                            builder: (context, snapshot) {
                              if (snapshot.connectionState ==
                                  ConnectionState.done) {
                                return Container();
                              } else {
                                return Center();
                              }
                            },
                          ),
                        ],
                      ),
                    ),
                  ),
                );
              },
            ),
          ],
        ),
      ),
    );
  }
}